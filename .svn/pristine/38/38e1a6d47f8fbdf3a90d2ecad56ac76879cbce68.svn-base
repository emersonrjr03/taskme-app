--CREATING THE DATABASE USER
/*
CREATE USER TASKME IDENTIFIED BY 18081990;
GRANT CONNECT, RESOURCE, DBA TO TASKME;
GRANT UNLIMITED TABLESPACE TO TASKME;
 */


--USER TABLE
CREATE TABLE T_USER (
  ID NUMBER(9) NOT NULL,
  GIVEN_NAME VARCHAR2(50) NOT NULL,
  FAMILY_NAME VARCHAR2(50) NOT NULL,
  CONTACT VARCHAR2(12) NOT NULL,
  ADDRESS VARCHAR2(120),
  USERNAME VARCHAR2(20) NOT NULL,
  PASSWORD VARCHAR2(60) NOT NULL,
  CONSTRAINT PK_USER_ID PRIMARY KEY (ID),
  CONSTRAINT UQ_USERNAME UNIQUE (USERNAME)
);

COMMENT ON TABLE T_USER is 'Table of users';

COMMENT ON COLUMN T_USER.ID is 'User ID';
COMMENT ON COLUMN T_USER.GIVEN_NAME is 'User given Name';
COMMENT ON COLUMN T_USER.FAMILY_NAME is 'User username family name';
COMMENT ON COLUMN T_USER.CONTACT is 'User contact';
COMMENT ON COLUMN T_USER.ADDRESS is 'User address';
COMMENT ON COLUMN T_USER.USERNAME is 'User application username';
COMMENT ON COLUMN T_USER.USERNAME is 'User application password';

CREATE SEQUENCE SQ_USER
  START WITH 1000000
  INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_USER_ID BEFORE INSERT ON T_USER FOR EACH ROW
  BEGIN
    IF :NEW.id IS NULL THEN
      SELECT SQ_USER.nextval INTO :NEW.id FROM DUAL;
    END IF;
  END TRG_USER_ID;
/
--END USER TABLE

--MEDIA MEDIA
CREATE TABLE MEDIA (
  ID NUMBER(9) NOT NULL,
  TYPE VARCHAR(2) NOT NULL,
  DESCRIPTION VARCHAR2(150) NOT NULL,
  URL VARCHAR2(250) NOT NULL,
  T_USER NUMBER(9) NOT NULL,
  CONSTRAINT PK_MEDIA PRIMARY KEY (ID),
  CONSTRAINT FK_MEDIA_T_USER FOREIGN KEY (T_USER)
  REFERENCES T_USER(ID)
);

COMMENT ON TABLE MEDIA is 'Table of medias';

COMMENT ON COLUMN MEDIA.ID is 'Media ID';
COMMENT ON COLUMN MEDIA.TYPE is 'Type of Media(1=Image, 2=video, 3=audio)';
COMMENT ON COLUMN MEDIA.DESCRIPTION is 'Description for the media.';
COMMENT ON COLUMN MEDIA.URL is 'Where to find the Media.';
COMMENT ON COLUMN MEDIA.T_USER is 'User that this media belongs to Ref. T_USER';

CREATE SEQUENCE SQ_MEDIA
  START WITH 1000000
  INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_MEDIA_ID BEFORE INSERT ON MEDIA FOR EACH ROW
  BEGIN
    IF :NEW.id IS NULL THEN
      SELECT SQ_MEDIA.nextval INTO :NEW.id FROM DUAL;
    END IF;
  END TRG_MEDIA_ID;
/
--END MEDIA TABLE

--PRICE_TABLE TABLE
CREATE TABLE PRICE_TABLE (
  ID NUMBER(9) NOT NULL,
  NAME VARCHAR(30) NOT NULL,
  DESCRIPTION VARCHAR2(150) NOT NULL,
  CONSTRAINT PK_PRICE_TABLE PRIMARY KEY (ID)
);

COMMENT ON TABLE PRICE_TABLE is 'Table that has the services offered and their prices.';

COMMENT ON COLUMN PRICE_TABLE.ID is 'Price table ID';
COMMENT ON COLUMN PRICE_TABLE.NAME is 'Name of the price table';
COMMENT ON COLUMN PRICE_TABLE.DESCRIPTION is 'Description of the price table.';

CREATE SEQUENCE SQ_PRICE_TABLE
  START WITH 1000000
  INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_PRICE_TABLE_ID BEFORE INSERT ON PRICE_TABLE FOR EACH ROW
  BEGIN
    IF :NEW.id IS NULL THEN
      SELECT SQ_PRICE_TABLE.nextval INTO :NEW.id FROM DUAL;
    END IF;
  END TRG_PRICE_TABLE_ID;
/
--END PRICE_TABLE TABLE

--PRICE_TABLE_ITEM TABLE
CREATE TABLE PRICE_TABLE_ITEM (
  ID NUMBER(9) NOT NULL,
  NAME VARCHAR2(30) NOT NULL,
  DESCRIPTION VARCHAR2(150) NOT NULL,
  PRICE NUMBER(9,2) NOT NULL,
  PRICE_TABLE NUMBER(9) NOT NULL,
  CONSTRAINT PK_PRICE_TABLE_ITEM PRIMARY KEY (ID),
  CONSTRAINT FK_PRI_TAB_ITEM_PRICE_TABLE FOREIGN KEY (PRICE_TABLE)
  REFERENCES PRICE_TABLE(ID)
);

COMMENT ON TABLE PRICE_TABLE_ITEM is 'Table that has the services offered and their prices';

COMMENT ON COLUMN PRICE_TABLE_ITEM.ID is 'Price table ID';
COMMENT ON COLUMN PRICE_TABLE_ITEM.NAME is 'Name of the item';
COMMENT ON COLUMN PRICE_TABLE_ITEM.DESCRIPTION is 'Description of the item';
COMMENT ON COLUMN PRICE_TABLE_ITEM.PRICE is 'Item price';
COMMENT ON COLUMN PRICE_TABLE_ITEM.PRICE_TABLE is 'The price table this item is from. Ref. PRICE_TABLE';

CREATE SEQUENCE SQ_PRICE_TABLE_ITEM
  START WITH 1000000
  INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_PRICE_TABLE_ITEM_ID BEFORE INSERT ON PRICE_TABLE_ITEM FOR EACH ROW
  BEGIN
    IF :NEW.id IS NULL THEN
      SELECT SQ_PRICE_TABLE_ITEM.nextval INTO :NEW.id FROM DUAL;
    END IF;
  END TRG_PRICE_TABLE_ITEM_ID;
/
--END PRICE_TABLE_ITEM TABLE


--WORKSHEET TABLE
CREATE TABLE WORKSHEET (
  ID NUMBER(9) NOT NULL,
  DESCRIPTION VARCHAR2(150) NOT NULL,
  HOME_BASED CHAR(1) DEFAULT 'N' NOT NULL,
  PRICE_TABLE NUMBER(9) NOT NULL,
  T_USER NUMBER(9) NOT NULL,
  CLASSIFICATION NUMBER(12,2) DEFAULT 0.0 NOT NULL,
  CONSTRAINT PK_WORKSHEET PRIMARY KEY (ID),
  CONSTRAINT FK_WORKSHEET_PRICE_TABLE FOREIGN KEY (PRICE_TABLE)
    REFERENCES PRICE_TABLE(ID),
  CONSTRAINT FK_WORKSHEET_T_USER FOREIGN KEY (T_USER)
    REFERENCES T_USER(ID)
);

COMMENT ON TABLE WORKSHEET is 'Table of Worksheet';

COMMENT ON COLUMN WORKSHEET.ID is 'Worksheet ID';
COMMENT ON COLUMN WORKSHEET.DESCRIPTION is 'Description of the worksheet';
COMMENT ON COLUMN WORKSHEET.HOME_BASED is 'The service is Home based?';
COMMENT ON COLUMN WORKSHEET.PRICE_TABLE is 'Services table price Ref. PRICE_TABLE';
COMMENT ON COLUMN WORKSHEET.T_USER is 'The user that created the worksheet Ref. T_USER';
COMMENT ON COLUMN WORKSHEET.CLASSIFICATION is 'Classification based on employer of the service';

CREATE SEQUENCE SQ_WORKSHEET
  START WITH 1000000
  INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_WORKSHEET_ID BEFORE INSERT ON WORKSHEET FOR EACH ROW
  BEGIN
    IF :NEW.id IS NULL THEN
      SELECT SQ_WORKSHEET.nextval INTO :NEW.id FROM DUAL;
    END IF;
  END TRG_WORKSHEET_ID;
/
--END WORKSHEET TABLE

--WORKSHEET_MEDIA TABLE
CREATE TABLE WORKSHEET_MEDIA (
  ID NUMBER(9) NOT NULL,
  WORKSHEET NUMBER(9) NOT NULL,
  MEDIA NUMBER(9) NOT NULL,
  CONSTRAINT PK_WORKSHEET_MEDIA PRIMARY KEY (ID),
  CONSTRAINT FK_WKSHEET_MED_WORKSHEET FOREIGN KEY (WORKSHEET)
  REFERENCES WORKSHEET(ID),
  CONSTRAINT FK_WKSHEET_MED_MEDIA FOREIGN KEY (MEDIA)
  REFERENCES MEDIA(ID)
);

COMMENT ON TABLE WORKSHEET_MEDIA is 'Table that has the media of the worksheets';

COMMENT ON COLUMN WORKSHEET_MEDIA.ID is 'Worksheet ID';
COMMENT ON COLUMN WORKSHEET_MEDIA.WORKSHEET is 'A worksheet that will be linked to a media. Ref. WORKSHEET';
COMMENT ON COLUMN WORKSHEET_MEDIA.MEDIA is 'A media that will be linked to a worksheet. Ref. MEDIA';

CREATE SEQUENCE SQ_WORKSHEET_MEDIA
  START WITH 1000000
  INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_WORKSHEET_MEDIA_ID BEFORE INSERT ON WORKSHEET_MEDIA FOR EACH ROW
  BEGIN
    IF :NEW.id IS NULL THEN
      SELECT SQ_WORKSHEET_MEDIA.nextval INTO :NEW.id FROM DUAL;
    END IF;
  END TRG_WORKSHEET_MEDIA_ID;
/
--END WORKSHEET_MEDIA TABLE

--TASK_SOMEONE TABLE
CREATE TABLE TASK_SOMEONE (
  ID NUMBER(9) NOT NULL,
  T_USER NUMBER(9) NOT NULL,
  DESCRIPTION VARCHAR2(300) NOT NULL,
  LOCATION VARCHAR2(150) NOT NULL,--TODO NEED TO CHANGE THIS COLUMN FOR A TABLE
  CONSTRAINT PK_TASK_SOMEONE PRIMARY KEY (ID),
  CONSTRAINT FK_TASK_SOMEONE_T_USER FOREIGN KEY (T_USER)
  REFERENCES T_USER(ID)
);

COMMENT ON TABLE TASK_SOMEONE is 'Table of TaskSomeone';

COMMENT ON COLUMN TASK_SOMEONE.ID is 'TaskSomeone ID';
COMMENT ON COLUMN TASK_SOMEONE.T_USER is 'The user that created the TaskSomeone Ref. T_USER';
COMMENT ON COLUMN TASK_SOMEONE.DESCRIPTION is 'Description of the task';
COMMENT ON COLUMN TASK_SOMEONE.LOCATION is 'Local of the task';

CREATE SEQUENCE SQ_TASK_SOMEONE
  START WITH 1000000
  INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_TASK_SOMEONE BEFORE INSERT ON TASK_SOMEONE FOR EACH ROW
  BEGIN
    IF :NEW.id IS NULL THEN
      SELECT SQ_TASK_SOMEONE.nextval INTO :NEW.id FROM DUAL;
    END IF;
  END TRG_TASK_SOMEONE;
/
--END TASK_SOMEONE TABLE

--TASK_SOME_MEDIA TABLE
CREATE TABLE TASK_SOME_MEDIA (
  ID NUMBER(9) NOT NULL,
  TASK_SOMEONE NUMBER(9) NOT NULL,
  MEDIA NUMBER(9) NOT NULL,
  CONSTRAINT PK_TASK_SOME_MEDIA PRIMARY KEY (ID),
  CONSTRAINT FK_TK_SOME_MEDIA_TASK_SOMEONE FOREIGN KEY (TASK_SOMEONE)
  REFERENCES TASK_SOMEONE(ID),
  CONSTRAINT FK_TK_SOME_MEDIA_MEDIA FOREIGN KEY (MEDIA)
  REFERENCES MEDIA(ID)
);

COMMENT ON TABLE TASK_SOME_MEDIA is 'Table that has the media of the taskSomeone';

COMMENT ON COLUMN TASK_SOME_MEDIA.ID is 'taskSomeone media ID';
COMMENT ON COLUMN TASK_SOME_MEDIA.TASK_SOMEONE is 'A taskSomeone that will be linked to a media. Ref. TASK_SOMEONE';
COMMENT ON COLUMN TASK_SOME_MEDIA.MEDIA is 'A media that will be linked to a taskSomeone. Ref. MEDIA';

CREATE SEQUENCE SQ_TASK_SOME_MEDIA
  START WITH 1000000
  INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_TASK_SOME_MEDIA_ID BEFORE INSERT ON TASK_SOME_MEDIA FOR EACH ROW
  BEGIN
    IF :NEW.id IS NULL THEN
      SELECT SQ_TASK_SOME_MEDIA.nextval INTO :NEW.id FROM DUAL;
    END IF;
  END TRG_TASK_SOME_MEDIA_ID;
/
--END TASK_SOME_MEDIA TABLE

--TASK_ME TABLE
CREATE TABLE TASK_ME (
  ID NUMBER(9) NOT NULL,
  T_USER NUMBER(9) NOT NULL,
  WORKSHEET NUMBER(9) NOT NULL,
  LOCATION VARCHAR2(150) NOT NULL,--TODO NEED TO CHANGE THIS COLUMN FOR A TABLE
  CONSTRAINT PK_TASK_ME PRIMARY KEY (ID),
  CONSTRAINT FK_TASK_ME_T_USER FOREIGN KEY (T_USER)
  REFERENCES T_USER(ID),
  CONSTRAINT FK_TASK_ME_WORKSHEET FOREIGN KEY (WORKSHEET)
  REFERENCES WORKSHEET(ID)

);

COMMENT ON TABLE TASK_ME is 'Table of TaskSomeone';

COMMENT ON COLUMN TASK_ME.ID is 'TaskSomeone ID';
COMMENT ON COLUMN TASK_ME.T_USER is 'The user that created the TaskMe Ref. T_USER';
COMMENT ON COLUMN TASK_ME.WORKSHEET is 'Worksheet that has the details of the service. Ref. WORKSHEET';
COMMENT ON COLUMN TASK_ME.LOCATION is 'Local of the task';

CREATE SEQUENCE SQ_TASK_ME
  START WITH 1000000
  INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_TASK_ME BEFORE INSERT ON TASK_ME FOR EACH ROW
  BEGIN
    IF :NEW.id IS NULL THEN
      SELECT SQ_TASK_ME.nextval INTO :NEW.id FROM DUAL;
    END IF;
  END TRG_TASK_ME;
/
--END TASK_ME TABLE


--ADDING PROFILE_PHOTO TO USER TABLE
ALTER TABLE T_USER
  ADD PROFILE_PHOTO NUMBER(9);

COMMENT ON COLUMN T_USER.PROFILE_PHOTO is 'The photo that will be in the user profile Ref. MEDIA';

ALTER TABLE T_USER
  ADD CONSTRAINT FK_T_USER_PROFILE_PHOTO FOREIGN KEY (PROFILE_PHOTO)
REFERENCES MEDIA(ID);

--ADDING CREATED TO USER TABLE
ALTER TABLE T_USER
  ADD CREATED DATE;

COMMENT ON COLUMN T_USER.CREATED is 'The user created date.';

--ADDING BIRTH_DATE TO USER TABLE
ALTER TABLE T_USER
  ADD BIRTH_DATE DATE;

COMMENT ON COLUMN T_USER.BIRTH_DATE is 'The user date of birth.';

--ADDING TITLE COLUMN TO TASK_SOMEONE TABLE
ALTER TABLE TASK_SOMEONE
  ADD TITLE VARCHAR2(70);

COMMENT ON COLUMN TASK_SOMEONE.TITLE is 'The title of the task.';

--ADDING CREATED TO USER TABLE
ALTER TABLE TASK_SOMEONE
  ADD CREATED DATE;

COMMENT ON COLUMN TASK_SOMEONE.CREATED is 'The creation date of the task.';


--CREATING PARAM TABLE
CREATE TABLE T_PARAM(
  ID NUMBER(9) PRIMARY KEY,
  PARAM_CODE VARCHAR(30) UNIQUE,
  PARAM_VALUE VARCHAR(2000)
);

COMMENT ON TABLE T_PARAM is 'Table of Parameters';

COMMENT ON COLUMN T_PARAM.ID is 'Parameter ID';
COMMENT ON COLUMN T_PARAM.PARAM_CODE is 'The code used to identify the Parameter';
COMMENT ON COLUMN T_PARAM.PARAM_VALUE is 'The parameter''s value';

CREATE SEQUENCE SQ_T_PARAM
  START WITH 1000000
  INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_T_PARAM BEFORE INSERT ON T_PARAM FOR EACH ROW
  BEGIN
    IF :NEW.id IS NULL THEN
      SELECT SQ_T_PARAM.nextval INTO :NEW.id FROM DUAL;
    END IF;
  END TRG_T_PARAM;
/

--ADDING A NEW PARAMETER WITH THE DEFAULT PROFILE IMAGE URL.
SET DEFINE OFF;

INSERT INTO T_PARAM(PARAM_CODE, PARAM_VALUE)
VALUES('DEFAULT_IMG_URL', 'https://www.canva.com/design/DADRa5iNNwg/share?role=EDITOR&token=v5iZtInmjlgfjjsWmK0gbw&utm_content=DADRa5iNNwg&utm_campaign=designshare&utm_medium=link&utm_source=sharebutton');

--DROPPING T_USER COLUMN FROM MEDIA
ALTER TABLE MEDIA DROP COLUMN T_USER;

--ADDING THE PUBLIC_ID COLUMN TO THE MEDIA TABLE, BECAUSE OF THE CLOUDINARY IMPLEMENTATION.
ALTER TABLE MEDIA ADD PUBLIC_ID VARCHAR2(300);
COMMENT ON COLUMN MEDIA.PUBLIC_ID is 'The media public_id that will be used to get the media from cloudinary.';

--ADDING CREATED TO USER TABLE
ALTER TABLE MEDIA
  ADD CREATED DATE;

COMMENT ON COLUMN MEDIA.CREATED is 'The media created date.';


--REMOVING THE TASK_SOME_MEDIA, CHANGING THE RELATION TO 1:N
ALTER TABLE MEDIA
    ADD TASK_SOMEONE NUMBER(9);

COMMENT ON COLUMN MEDIA.TASK_SOMEONE is 'The tasksome that this media belongs to.';

--Moving the data from the task_some_media to the media new column (TASK_SOMEONE)
/
begin
    for rec in (select * from task_some_media)loop
        UPDATE MEDIA SET TASK_SOMEONE = rec.task_someone WHERE ID = rec.media;
    end loop;
end;
/

--DROPPING TASK_SOME_MEDIA TABLE
DROP TABLE TASK_SOME_MEDIA;

